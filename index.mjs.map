{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport incrpcorr from '@stdlib/stats-incr-pcorr';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample Pearson product-moment correlation distance.\n*\n* ## Method\n*\n* -   The sample Pearson product-moment correlation distance is defined as\n*\n*     ```tex\n*     d = 1 - r = 1 - \\frac{\\operatorname{cov}_n(x,y)}{\\sigma_x \\sigma_y}\n*     ```\n*\n* -   The implementation thus computes the sample Pearson product-moment correlation coefficient \\\\(r\\\\) and subtracts the coefficient from 1.\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrpcorrdist();\n*\n* var d = accumulator();\n* // returns null\n*\n* d = accumulator( 2.0, 1.0 );\n* // returns 1.0\n*\n* d = accumulator( -5.0, 3.14 );\n* // returns ~2.0\n*\n* d = accumulator();\n* // returns ~2.0\n*\n* @example\n* var accumulator = incrpcorrdist( 2.0, -3.0 );\n*/\nfunction incrpcorrdist( meanx, meany ) {\n\tvar pcorr;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( '0eh4M', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( '0eh4N', meany ) );\n\t\t}\n\t\tpcorr = incrpcorr( meanx, meany );\n\t} else {\n\t\tpcorr = incrpcorr();\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sample correlation distance. If not provided input values, the accumulator function returns the current sample correlation distance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} sample correlation distance or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = pcorr();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn 1.0 - r;\n\t\t}\n\t\treturn 1.0 - pcorr( x, y );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrpcorrdist;\n"],"names":["incrpcorrdist","meanx","meany","pcorr","arguments","length","isNumber","TypeError","format","incrpcorr","accumulator","x","y","r"],"mappings":";;iRAkEA,SAASA,EAAeC,EAAOC,GAC9B,IAAIC,EACJ,GAAKC,UAAUC,OAAS,CACvB,IAAMC,EAAUL,GACf,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAEvC,IAAMK,EAAUJ,GACf,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvCC,EAAQM,EAAWR,EAAOC,EAC5B,MACEC,EAAQM,IAET,OAAOC,EAUP,SAASA,EAAaC,EAAGC,GACxB,IAAIC,EACJ,OAA0B,IAArBT,UAAUC,OAEH,QADXQ,EAAIV,KAEIU,EAED,EAAMA,EAEP,EAAMV,EAAOQ,EAAGC,EACvB,CACF"}